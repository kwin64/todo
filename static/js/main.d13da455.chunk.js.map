{"version":3,"sources":["App.module.css","reportWebVitals.ts","ButtonsFiltering/ButtonsFiltering.tsx","EditableTitle.tsx","Tasks/Tasks.tsx","AddForm.tsx","TasksManagement/TasksManagement.tsx","Todolist.tsx","Todolists.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ButtonsFiltering","changeTodoListFilter","filter","todoListsID","Button","className","s","activeButton","variant","size","color","onClick","EditableTitle","title","changeTitle","useState","enableEdit","setEnableEdit","newTitle","setNewTitle","value","autoFocus","onChange","e","currentTarget","onBlur","onKeyPress","key","onDoubleClick","Tasks","tasks","removeTask","changeStatusTask","changeTasksTitle","tasksItems","map","t","isDone","id","Checkbox","defaultChecked","inputProps","checked","IconButton","aria-label","AddForm","addItemForm","error","setError","valueTask","setValueTask","addTaskHandler","trimmedValueTask","trim","todo","TextField","label","helperText","TasksManagement","titleTodoList","addTask","removeTodoList","changeTodoListTitle","TodoList","TodoLists","todoListsComponents","todoListsItem","tl","tasksForTodoLists","Box","boxShadow","fontStyle","fontFamily","container","App","firstTodo","v1","secondTodo","todoLists","setTodolists","setTasks","idTodoList","Todolists","newTask","newFilterValue","todoList","find","taskID","statusTask","task","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d13da455.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1jck7\",\"todo\":\"App_todo__1M4G4\",\"activeButton\":\"App_activeButton__1UsXc\",\"error\":\"App_error__pxkWB\",\"li\":\"App_li__1OJ5v\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport {FilterValueType} from \"../App\";\nimport s from '../App.module.css';\nimport {Button} from \"@material-ui/core\";\n\ntype PropsType = {\n    changeTodoListFilter: (filterValue: FilterValueType, id: string) => void\n    filter: FilterValueType\n    todoListsID: string\n}\n\nconst ButtonsFiltering: React.FC<PropsType> = (\n    {\n        changeTodoListFilter,\n        filter,\n        todoListsID\n    }\n) => {\n    const onClickButtonAllHandler = () => {\n        changeTodoListFilter('all', todoListsID)\n    }\n    const onClickButtonActiveHandler = () => {\n        changeTodoListFilter('active', todoListsID)\n    }\n    const onClickButtonCompletedHandler = () => {\n        changeTodoListFilter('completed', todoListsID)\n    }\n    return (\n        <div>\n            <Button className={filter === 'all' ? s.activeButton : ''}\n                    variant={filter === 'all' ? 'contained' : \"outlined\"}\n                    size='small' color='primary'\n                    onClick={onClickButtonAllHandler}>All\n            </Button>\n            <Button className={filter === 'active' ? s.activeButton : ''}\n                    variant={filter === 'active' ? 'contained' : \"outlined\"}\n                    size='small' color='primary'\n                    onClick={onClickButtonActiveHandler}>Active\n            </Button>\n            <Button className={filter === 'completed' ? s.activeButton : ''}\n                    variant={filter === 'completed' ? 'contained' : \"outlined\"}\n                    size='small' color='primary'\n                    onClick={onClickButtonCompletedHandler}>Completed\n            </Button>\n        </div>\n    );\n}\n\n\nexport default ButtonsFiltering;\n","import React, {KeyboardEvent, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nconst EditableTitle: React.FC<PropsType> = (\r\n    {\r\n        title,\r\n        changeTitle\r\n    }\r\n) => {\r\n\r\n    const [enableEdit, setEnableEdit] = useState<boolean>(false)\r\n    const [newTitle, setNewTitle] = useState<string>(title)\r\n\r\n    const changeEditorOn = () => setEnableEdit(true)\r\n    const changeEditorOff = () => {\r\n        setEnableEdit(false)\r\n        changeTitle(newTitle)\r\n    }\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEnableEdit(false)\r\n            changeTitle(newTitle)\r\n        }\r\n    }\r\n\r\n    return (\r\n        enableEdit\r\n            ? <input value={newTitle}\r\n                     autoFocus\r\n                     onChange={onChangeHandler}\r\n                     onBlur={changeEditorOff}\r\n                     onKeyPress={onEnter}/>\r\n            : <span onDoubleClick={changeEditorOn}>{title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableTitle;","import React, {ChangeEvent} from 'react';\nimport {TaskType} from \"../App\";\nimport EditableTitle from \"../EditableTitle\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\n\ntype PropsType = {\n    tasks: Array<TaskType>\n    todoListsID: string\n    removeTask: (id: string, todoListsID: string) => void\n    changeStatusTask: (taskID: string, statusTask: boolean, todoListsID: string) => void\n    changeTasksTitle: (idTask: string, newTitle: string, todoListsID: string) => void\n}\n\nconst Tasks: React.FC<PropsType> = (\n    {\n        tasks,\n        todoListsID,\n        removeTask,\n        changeStatusTask,\n        changeTasksTitle\n    }\n) => {\n\n    const tasksItems = tasks.map(t => {\n            const removeTaskHandler = () => {\n                removeTask(t.id, todoListsID)\n            }\n            const changeStatusTaskHandler = (e: ChangeEvent<HTMLInputElement>) => {\n                changeStatusTask(t.id, e.currentTarget.checked, todoListsID)\n            }\n            const changeTitle = (title: string) => {\n                changeTasksTitle(t.id, title, todoListsID)\n            }\n\n            return (<li key={t.id} className={t.isDone ? 'isDone' : ''}>\n                <EditableTitle title={t.title} changeTitle={changeTitle}/>\n                <Checkbox\n                    defaultChecked\n                    color=\"primary\"\n                    inputProps={{'aria-label': 'secondary checkbox'}}\n                    checked={t.isDone}\n                    size='small'\n                    onChange={changeStatusTaskHandler}/>\n                <IconButton aria-label=\"delete\">\n                    <DeleteIcon\n                        onClick={removeTaskHandler}/>\n                </IconButton>\n            </li>)\n        }\n    )\n\n    return (\n        <ul>\n            {tasksItems}\n        </ul>\n    );\n}\n\nexport default Tasks;\n","import React, {KeyboardEvent, useState} from 'react';\r\nimport s from \"./App.module.css\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    addItemForm: (title: string) => void\r\n}\r\n\r\nconst AddForm: React.FC<PropsType> = (\r\n    {\r\n        addItemForm\r\n    }\r\n) => {\r\n\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [valueTask, setValueTask] = useState<string>('')\r\n\r\n\r\n    const newValueTask = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValueTask(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const addTaskHandler = () => {\r\n        const trimmedValueTask = valueTask.trim()\r\n        if (trimmedValueTask) {\r\n            addItemForm(trimmedValueTask)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setValueTask('')\r\n    }\r\n    const keyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTaskHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.todo}>\r\n            <TextField variant=\"outlined\"\r\n                       size='small'\r\n                       error={error}\r\n                       value={valueTask}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       onChange={newValueTask}\r\n                       onKeyPress={keyPressAddTask}/>\r\n            <Button onClick={addTaskHandler}\r\n                    color='default'\r\n                    size='medium'\r\n            >+\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddForm;","import React from 'react';\nimport AddForm from \"../AddForm\";\nimport EditableTitle from \"../EditableTitle\";\nimport {IconButton} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\ntype PropsType = {\n    titleTodoList: string\n    addTask: (title: string, todoListsID: string) => void\n    todoListsID: string\n    removeTodoList: (todoListsID: string) => void\n    changeTodoListTitle: (newTitle: string, todoListsID: string) => void\n}\n\nconst TasksManagement: React.FC<PropsType> = (\n    {\n        titleTodoList,\n        addTask,\n        todoListsID,\n        removeTodoList,\n        changeTodoListTitle\n    }\n) => {\n\n    const addTaskForm = (title: string) => {\n        addTask(title, todoListsID)\n    }\n    const removeTodoListHandler = () => {\n        removeTodoList(todoListsID)\n    }\n    const changeTitle = (title: string) => {\n        changeTodoListTitle(title, todoListsID)\n    }\n\n    return (\n        <div>\n            <h3>\n                <EditableTitle title={titleTodoList} changeTitle={changeTitle}/>\n                <IconButton aria-label=\"delete\">\n                    <DeleteIcon\n                        onClick={removeTodoListHandler}/>\n                </IconButton>\n            </h3>\n            <AddForm addItemForm={addTaskForm}/>\n        </div>\n    );\n}\n\nexport default TasksManagement;\n","import React from 'react';\nimport s from './App.module.css';\nimport ButtonsFiltering from './ButtonsFiltering/ButtonsFiltering';\nimport Tasks from './Tasks/Tasks';\nimport TasksManagement from './TasksManagement/TasksManagement';\nimport {FilterValueType, TaskType} from \"./App\";\n\ntype PropsType = {\n    todoListsID: string\n    titleTodoList: string\n    tasks: Array<TaskType>\n    addTask: (title: string, todoListsID: string) => void\n    removeTask: (id: string, todoListsID: string) => void\n    changeTodoListFilter: (filterValue: FilterValueType, id: string) => void\n    changeStatusTask: (taskID: string, statusTask: boolean, todoListsID: string) => void\n    removeTodoList: (todoListsID: string) => void\n    filter: FilterValueType\n    changeTodoListTitle: (newTitle: string, todoListsID: string) => void\n    changeTasksTitle: (idTask: string, newTitle: string, todoListsID: string) => void\n}\n\nconst TodoList: React.FC<PropsType> = (\n    {\n        todoListsID,\n        titleTodoList,\n        tasks,\n        addTask,\n        removeTask,\n        changeTodoListFilter,\n        changeStatusTask,\n        removeTodoList,\n        filter,\n        changeTodoListTitle,\n        changeTasksTitle\n    }\n) => {\n\n    return (\n        <div className={s.todo}>\n            <TasksManagement todoListsID={todoListsID}\n                             titleTodoList={titleTodoList}\n                             addTask={addTask}\n                             removeTodoList={removeTodoList}\n                             changeTodoListTitle={changeTodoListTitle}\n            />\n            <Tasks todoListsID={todoListsID}\n                   tasks={tasks}\n                   removeTask={removeTask}\n                   changeStatusTask={changeStatusTask}\n                   changeTasksTitle={changeTasksTitle}\n            />\n            <ButtonsFiltering todoListsID={todoListsID}\n                              changeTodoListFilter={changeTodoListFilter}\n                              filter={filter}\n            />\n        </div>\n    );\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.module.css';\nimport TodoList from \"./Todolist\";\nimport {FilterValueType, TasksStateType, TodolistType} from \"./App\";\nimport s from \"./App.module.css\";\nimport {Box} from \"@material-ui/core\";\n\ntype PropsType = {\n    todoListsComponents: Array<TodolistType>\n    tasks: TasksStateType\n    addTask: (title: string, todoListsID: string) => void\n    removeTask: (id: string, todoListsID: string) => void\n    changeStatusTask: (taskID: string, statusTask: boolean, todoListsID: string) => void\n    removeTodoList: (todoListsID: string) => void\n    changeTodoListFilter: (filterValue: FilterValueType, id: string) => void\n    changeTodoListTitle: (newTitle: string, todoListsID: string) => void\n    changeTasksTitle: (idTask: string, newTitle: string, todoListsID: string) => void\n}\n\nconst TodoLists: React.FC<PropsType> = (\n    {\n        todoListsComponents,\n        tasks,\n        addTask,\n        removeTask,\n        changeTodoListFilter,\n        changeStatusTask,\n        removeTodoList,\n        changeTodoListTitle,\n        changeTasksTitle\n    }\n) => {\n\n    const todoListsItem = todoListsComponents.map(tl => {\n            let tasksForTodoLists = tasks[tl.id]\n            if (tl.filter === 'active') {\n                tasksForTodoLists = tasksForTodoLists.filter(t => !t.isDone)\n            }\n            if (tl.filter === 'completed') {\n                tasksForTodoLists = tasksForTodoLists.filter(t => t.isDone)\n            }\n            return (\n                <Box boxShadow={2} fontStyle={'oblique'} fontFamily={'Monospace'} >\n                    <TodoList todoListsID={tl.id}\n                              titleTodoList={tl.title}\n                              filter={tl.filter}\n                              tasks={tasksForTodoLists}\n                              addTask={addTask}\n                              removeTask={removeTask}\n                              changeTodoListFilter={changeTodoListFilter}\n                              changeStatusTask={changeStatusTask}\n                              removeTodoList={removeTodoList}\n                              changeTodoListTitle={changeTodoListTitle}\n                              changeTasksTitle={changeTasksTitle}\n                    />\n                </Box>\n            )\n        }\n    )\n\n    return (\n        <div className={s.container}>\n            {todoListsItem}\n        </div>\n    );\n}\n\nexport default TodoLists;\n","import React, {useState} from 'react';\nimport {v1} from 'uuid';\nimport Todolists from './Todolists';\nimport AddForm from \"./AddForm\";\n\nexport type TaskType = { id: string, title: string, isDone: boolean }\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\nexport type FilterValueType = 'all' | 'active' | 'completed'\n\nexport type TodolistType = { id: string, title: string, filter: FilterValueType }\n\nfunction App() {\n\n    const firstTodo = v1()\n    const secondTodo = v1()\n\n    const [todoLists, setTodolists] = useState<Array<TodolistType>>([\n        {id: firstTodo, title: 'First todo', filter: 'all'},\n        {id: secondTodo, title: 'Second todo', filter: 'all'}\n    ])\n    const [tasks, setTasks] = useState<TasksStateType>({\n        [firstTodo]: [\n            {id: v1(), title: 'Buy car', isDone: false},\n            {id: v1(), title: 'Buy pen', isDone: true},\n            {id: v1(), title: 'Buy home', isDone: false},\n        ],\n        [secondTodo]: [\n            {id: v1(), title: 'Sleep', isDone: true},\n            {id: v1(), title: 'Eat', isDone: true},\n            {id: v1(), title: 'Work', isDone: true},\n        ]\n    })\n\n    const addTask = (title: string, todoListsID: string) => {\n        const newTask: TaskType = {id: v1(), title: title, isDone: false}\n        tasks[todoListsID] = [newTask, ...tasks[todoListsID]]\n        setTasks({...tasks})\n    }\n    const addTodoList = (title: string) => {\n        const idTodoList = v1()\n        const todo: TodolistType = {id: idTodoList, title, filter: 'all'}\n        setTodolists([...todoLists, todo])\n        setTasks({...tasks, [idTodoList]: []})\n    }\n    const removeTask = (id: string, todoListsID: string) => {\n        tasks[todoListsID] = tasks[todoListsID].filter(tl => tl.id !== id)\n        setTasks({...tasks})\n    }\n    const removeTodoList = (todoListsID: string) => {\n        setTodolists(todoLists.filter(tl => tl.id !== todoListsID))\n        delete tasks[todoListsID]\n    }\n    const changeStatusTask = (taskID: string, statusTask: boolean, todoListsID: string) => {\n        const task = tasks[todoListsID].find(t => t.id === taskID)\n        if (task) {\n            task.isDone = statusTask\n            setTasks({...tasks})\n        }\n    }\n    const changeTodoListFilter = (newFilterValue: FilterValueType, todoListsID: string) => {\n        let todoList = todoLists.find(tl => tl.id === todoListsID)\n        if (todoList) {\n            todoList.filter = newFilterValue\n            setTodolists([...todoLists])\n        }\n    }\n    const changeTodoListTitle = (newTitle: string, todoListsID: string) => {\n        let todoList = todoLists.find(tl => tl.id === todoListsID)\n        if (todoList) {\n            todoList.title = newTitle\n            setTodolists([...todoLists])\n        }\n    }\n    const changeTasksTitle = (taskID: string, newTitle: string, todoListsID: string) => {\n        let task = tasks[todoListsID].find(tl => tl.id === taskID)\n        if (task) {\n            task.title = newTitle\n            setTasks({...tasks})\n        }\n    }\n\n    return (\n        <div>\n            <AddForm addItemForm={addTodoList}/>\n            <Todolists todoListsComponents={todoLists}\n                       tasks={tasks}\n                       addTask={addTask}\n                       removeTask={removeTask}\n                       changeTodoListFilter={changeTodoListFilter}\n                       changeStatusTask={changeStatusTask}\n                       removeTodoList={removeTodoList}\n                       changeTodoListTitle={changeTodoListTitle}\n                       changeTasksTitle={changeTasksTitle}/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}